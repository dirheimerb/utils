5f91d1eab069292be90e5057cfe9b564
"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const _1 = __importDefault(require("."));
describe('Slugger', () => {
    describe('constructor', () => {
        it('should create an instance with default values', () => {
            const slugger = new _1.default();
            expect(slugger.slug).toBe('');
            expect(slugger.occurrences).toBe(0);
            expect(slugger.map.size).toBe(0);
        });
        it('should create an instance with provided values', () => {
            const slugger = new _1.default('Hello World', 1, new Map([['Hello World', 1]]));
            expect(slugger.slug).toBe('Hello World');
            expect(slugger.occurrences).toBe(1);
            expect(slugger.map.size).toBe(1);
        });
    });
    describe('getters and setters', () => {
        const slugger = new _1.default();
        it('should set and get slug', () => {
            slugger.slug = 'test';
            expect(slugger.slug).toBe('test');
        });
        it('should set and get occurrences', () => {
            slugger.occurrences = 2;
            expect(slugger.occurrences).toBe(2);
        });
    });
    describe('own', () => {
        it('should make slug immutable', () => {
            const slugger = new _1.default('test');
            slugger.own('new');
            expect(() => { slugger.slug = 'change'; }).toThrow();
        });
        it('should make occurrences immutable', () => {
            const slugger = new _1.default('test', 1);
            slugger.own('new');
            expect(() => { slugger.occurrences = 2; });
        });
    });
    describe('Should not be able to change map', () => {
        it('should make map immutable', () => {
            const slugger = new _1.default('test', 1, new Map([['test', 1]]));
            slugger.own('new');
            expect(() => { slugger.map.set('new', 1); });
        });
    });
    describe('Change the case of the slug', () => {
        it('should change the case of the slug', () => {
            const slugger = new _1.default('test');
            slugger.capitalize();
            expect(slugger.slug).toBe('Test');
        });
    });
    describe('slugify', () => {
        it('should slugify a string correctly', () => __awaiter(void 0, void 0, void 0, function* () {
            const slugger = new _1.default('Test Slug');
            slugger.slugify('Test Slug', false);
            expect(slugger.slug).toBe('test-slug');
        }));
    });
    describe('reset', () => {
        it('should reset slugger to initial state', () => {
            const slugger = new _1.default('test');
            slugger.mapit();
            slugger.reset();
            expect(slugger.slug).toBe('');
            expect(slugger.occurrences).toBe(0);
            expect(slugger.map.size).toBe(0);
        });
        describe('Change the case of the slug to lowercase', () => {
            it('should change the case of the slug to lowercase', () => {
                const slugger = new _1.default('TEST');
                slugger.lowercase();
                expect(slugger.slug).toBe('test');
            });
        });
        describe('own method', () => {
            it('should redefine slug property', () => {
                const slugger = new _1.default('test');
                slugger.own('new');
                expect(slugger.slug).toBe('new');
            });
        });
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,