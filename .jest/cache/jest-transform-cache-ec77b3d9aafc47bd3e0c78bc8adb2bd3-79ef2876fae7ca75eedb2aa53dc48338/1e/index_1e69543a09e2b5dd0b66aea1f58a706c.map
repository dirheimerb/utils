{"file":"/Users/bdirheimer/@flashutil/src/index.ts","mappings":"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","names":[],"sources":["/Users/bdirheimer/@flashutil/src/index.ts"],"sourcesContent":["import { regex } from './regex';\n/**\n * Slugger\n * @class Slugger\n * @description Slugger class for generating slugs\n * @version 1.0.0\n * @example const slugger = new Slugger(\"Hello World\");\n * @example const slugger = new Slugger(\"Hello World\", 1);\n * @example const slugger = new Slugger(\"Hello World\", 1, new Map<string, number>());\n */\nexport default class Slugger {\n    /**\n     * @private\n     * @property {string} _slug\n     */\n    private _slug: string;\n    /**\n     * @private\n     * @property {number} _occurrences\n     */\n    private _occurrences: number;\n    /**\n     * @private\n     * @property {Map<string, number>} _map\n     */\n    private _map: Map<string, number> = new Map<string, number>();\n    /**\n     * @constructor\n     * @param slug<string>\n     * @param _occurrences<number>\n     * @param map<string, number>\n     */\n    constructor(\n        slug: string = '',\n        occurrences: number = 0,\n        map: Map<string, number> = new Map<string, number>(),\n    ) {\n        this._slug = slug;\n        this._occurrences = occurrences;\n        this._map = map;\n        console.log('Slugger class instantiated'); // Debugging line\n    }\n    /**\n     * @public\n     * @property {string} slug\n     */\n    get slug() {\n        return this._slug;\n    }\n    /**\n     * @public\n     * @property {number} occurrences\n     */\n    get occurrences() {\n        return this._occurrences;\n    }\n    /**\n     * @public\n     * @property {Map<string, number>} map\n     */\n    get map() {\n        return this._map;\n    }\n    /**-\n     * @public\n     * @property {string} slug\n     */\n    set slug(slug: string) {\n        this._slug = slug;\n    }\n    /**\n     * @public\n     * @property {number} occurrences\n     */\n    set occurrences(occurrences: number) {\n        this._occurrences = occurrences;\n    }\n    /**\n     * @public\n     * @property {Map<string, number>} mapq\n     */\n    set map(map: Map<string, number>) {\n        this._map = map;\n    }\n    /**\n     * @public\n     * @method own\n     * @param slug\n     * @returns\n     */\n    own(slug: string = this.slug) {\n        const newObject = Object.defineProperty(this, '_slug', {\n            value: slug,\n            writable: false,\n            enumerable: false,\n            configurable: false,\n        });\n        console.log('Exiting own with newObject:', newObject); // Debugging line\n        return newObject;\n    }\n    /**'\n     * @public\n     * @method lowercase\n     * @returns {string}\n     * @description sets the slug to lowercase\n     */\n    lowercase(): string {\n        this._slug = this._slug.trim().toLowerCase();\n        return this._slug;\n    }\n    /**\n     * @public\n     * @method trim\n     * @returns {string}\n     * @description trims the slug\n     */\n    trim(): string {\n        this._slug = this._slug.trim();\n        console.log('Exiting trim with this._slug:', this._slug); // Debugging line\n        return this._slug;\n    }\n    /**\n     * @public\n     * @method uppercase\n     * @returns {string}\n     * @description sets the slug to uppercase\n     */\n    uppercase(): string {\n        console.log(\n            'Entering uppercase with this._slug:',\n            this._slug,\n        ); // Debugging line\n        this._slug = this._slug.trim().toUpperCase();\n        return this._slug;\n    }\n    /**\n     * @public\n     * @method capitalize\n     * @description sets the slug to capitalize\n     * @returns {string}\n     */\n    capitalize(): string {\n        this._slug = this._slug\n            .trim()\n            .replace(/\\w\\S*/g, (w) =>\n                w.replace(/^\\w/, (c) => c.toUpperCase()),\n            );\n\n        return this._slug;\n    }\n    /**\n     * @public\n     * @method mapit\n     * @description maps the slug\n     * @returns {void}\n     */\n    public mapit(): void {\n        const map = this._map;\n        const slug = this._slug;\n        map.set(slug, (map.get(slug) || 0) + 1);\n        if (map.has(slug)) {\n            this._occurrences = map.get(slug) || 0;\n        } else {\n            this._occurrences = 0;\n        }\n    }\n    /**\n     * @public\n     * @async\n     * @method slugify\n     * @description Slugifies the given string and returns it.\n     * @param slugger The string to slugify.\n     * @param maintainCase Whether to maintain the case.\n     * @returns {Promise<string>} The slugified string.\n     */\n    public async slugify(\n        slugger: string,\n        maintainCase: boolean = false,\n    ): Promise<string> {\n        console.log('Entering slugify with slugger:', slugger); // Debugging line\n        if (typeof slugger !== 'string' || slugger === '') return '';\n        try {\n            this._slug = slugger.trim();\n            this.mapit();\n            let result: string;\n            if (maintainCase) {\n                console.log('maintainCase is true');\n                result = this._slug\n                    .toLowerCase()\n                    .replace(regex, '')\n                    .replace(/ /g, '-');\n            } else {\n                console.log('maintainCase is false');\n                result = this._slug\n                    .toLowerCase()\n                    .replace(regex, '')\n                    .replace(/ /g, '-');\n            }\n            console.log('Exiting slugify with result:', result); // Debugging line\n\n            return result;\n        } catch (err: any) {\n            // Handle error here.\n            throw new Error(`Failed to slugify: ${err.message}`);\n        }\n    }\n\n    /**\n     * @public\n     * @method reset\n     * @description resets the slug\n     * @returns {void}\n     */\n    reset(): void {\n        this._slug = '';\n        this._occurrences = 0;\n        this._map.clear();\n    }\n}\n"],"version":3}