a62e97b4258e6602d3177f5dd37ec05b
"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const _1 = __importDefault(require("."));
describe('Slugger', () => {
    describe('constructor', () => {
        it('should create an instance with default values', () => {
            const slugger = new _1.default();
            expect(slugger.slug).toBe('');
            expect(slugger.occurrences).toBe(0);
            expect(slugger.map.size).toBe(0);
        });
        it('should create an instance with provided values', () => {
            const slugger = new _1.default('Hello World', 1, new Map([['Hello World', 1]]));
            expect(slugger.slug).toBe('Hello World');
            expect(slugger.occurrences).toBe(1);
            expect(slugger.map.size).toBe(1);
        });
    });
    describe('getters and setters', () => {
        const slugger = new _1.default();
        it('should set and get slug', () => {
            slugger.slug = 'test';
            expect(slugger.slug).toBe('test');
        });
        it('should set and get occurrences', () => {
            slugger.occurrences = 2;
            expect(slugger.occurrences).toBe(2);
        });
    });
    describe('own', () => {
        it('should make slug immutable', () => {
            const slugger = new _1.default('test');
            slugger.own('new');
            expect(() => { slugger.slug = 'change'; }).toThrow();
        });
        it('should make occurrences immutable', () => {
            const slugger = new _1.default('test', 1);
            slugger.own('new');
            expect(() => { slugger.occurrences = 2; });
        });
    });
    describe('Should not be able to change map', () => {
        it('should make map immutable', () => {
            const slugger = new _1.default('test', 1, new Map([['test', 1]]));
            slugger.own('new');
            expect(() => { slugger.map.set('new', 1); });
        });
    });
    describe('Change the case of the slug', () => {
        it('should change the case of the slug', () => {
            const slugger = new _1.default('test');
            slugger.capitalize();
            expect(slugger.slug).toBe('Test');
        });
    });
    describe('Change the case of the slug to lowercase', () => {
        it('should change the case of the slug to lowercase', () => {
            const slugger = new _1.default('TEST');
            slugger.lowercase();
            expect(slugger.slug).toBe('test');
        });
    });
    describe('own method', () => {
        it('should redefine slug property', () => {
            const slugger = new _1.default('test');
            slugger.own('new');
            expect(slugger.slug).toBe('new');
        });
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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LENBQUM7UUFDdEMsQ0FBQyxDQUFDLENBQUM7SUFDUCxDQUFDLENBQUMsQ0FBQztJQUNILFFBQVEsQ0FBQyxZQUFZLEVBQUUsR0FBRyxFQUFFO1FBRXhCLEVBQUUsQ0FBQywrQkFBK0IsRUFBRSxHQUFHLEVBQUU7WUFFckMsTUFBTSxPQUFPLEdBQUcsSUFBSSxVQUFPLENBQUMsTUFBTSxDQUFDLENBQUM7WUFDcEMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsQ0FBQztZQUNuQixNQUFNLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQztRQUNyQyxDQUFDLENBQUMsQ0FBQztJQUNQLENBQUMsQ0FBQyxDQUFDO0FBQ1AsQ0FBQyxDQUFDLENBQUMiLCJuYW1lcyI6W10sInNvdXJjZXMiOlsiL1VzZXJzL2JkaXJoZWltZXIvQGZsYXNodXRpbC9zcmMvaW5kZXgudGVzdC50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgU2x1Z2dlciBmcm9tIFwiLlwiO1xuXG5kZXNjcmliZSgnU2x1Z2dlcicsICgpID0+XG57XG4gICAgZGVzY3JpYmUoJ2NvbnN0cnVjdG9yJywgKCkgPT5cbiAgICB7XG4gICAgICAgIGl0KCdzaG91bGQgY3JlYXRlIGFuIGluc3RhbmNlIHdpdGggZGVmYXVsdCB2YWx1ZXMnLCAoKSA9PlxuICAgICAgICB7XG4gICAgICAgICAgICBjb25zdCBzbHVnZ2VyID0gbmV3IFNsdWdnZXIoKTtcbiAgICAgICAgICAgIGV4cGVjdChzbHVnZ2VyLnNsdWcpLnRvQmUoJycpO1xuICAgICAgICAgICAgZXhwZWN0KHNsdWdnZXIub2NjdXJyZW5jZXMpLnRvQmUoMCk7XG4gICAgICAgICAgICBleHBlY3Qoc2x1Z2dlci5tYXAuc2l6ZSkudG9CZSgwKTtcbiAgICAgICAgfSk7XG4gICAgICAgIGl0KCdzaG91bGQgY3JlYXRlIGFuIGluc3RhbmNlIHdpdGggcHJvdmlkZWQgdmFsdWVzJywgKCkgPT5cbiAgICAgICAge1xuICAgICAgICAgICAgY29uc3Qgc2x1Z2dlciA9IG5ldyBTbHVnZ2VyKCdIZWxsbyBXb3JsZCcsIDEsIG5ldyBNYXAoW1snSGVsbG8gV29ybGQnLCAxXV0pKTtcbiAgICAgICAgICAgIGV4cGVjdChzbHVnZ2VyLnNsdWcpLnRvQmUoJ0hlbGxvIFdvcmxkJyk7XG4gICAgICAgICAgICBleHBlY3Qoc2x1Z2dlci5vY2N1cnJlbmNlcykudG9CZSgxKTtcbiAgICAgICAgICAgIGV4cGVjdChzbHVnZ2VyLm1hcC5zaXplKS50b0JlKDEpO1xuICAgICAgICB9KTtcbiAgICB9KTtcblxuICAgIGRlc2NyaWJlKCdnZXR0ZXJzIGFuZCBzZXR0ZXJzJywgKCkgPT5cbiAgICB7XG4gICAgICAgIGNvbnN0IHNsdWdnZXIgPSBuZXcgU2x1Z2dlcigpO1xuICAgICAgICBpdCgnc2hvdWxkIHNldCBhbmQgZ2V0IHNsdWcnLCAoKSA9PlxuICAgICAgICB7XG4gICAgICAgICAgICBzbHVnZ2VyLnNsdWcgPSAndGVzdCc7XG4gICAgICAgICAgICBleHBlY3Qoc2x1Z2dlci5zbHVnKS50b0JlKCd0ZXN0Jyk7XG4gICAgICAgIH0pO1xuXG5cbiAgICAgICAgaXQoJ3Nob3VsZCBzZXQgYW5kIGdldCBvY2N1cnJlbmNlcycsICgpID0+XG4gICAgICAgIHtcbiAgICAgICAgICAgIHNsdWdnZXIub2NjdXJyZW5jZXMgPSAyO1xuICAgICAgICAgICAgZXhwZWN0KHNsdWdnZXIub2NjdXJyZW5jZXMpLnRvQmUoMik7XG4gICAgICAgIH0pO1xuICAgIH0pO1xuXG4gICAgZGVzY3JpYmUoJ293bicsICgpID0+XG4gICAge1xuICAgICAgICBpdCgnc2hvdWxkIG1ha2Ugc2x1ZyBpbW11dGFibGUnLCAoKSA9PlxuICAgICAgICB7XG4gICAgICAgICAgICBjb25zdCBzbHVnZ2VyID0gbmV3IFNsdWdnZXIoJ3Rlc3QnKTtcbiAgICAgICAgICAgIHNsdWdnZXIub3duKCduZXcnKTtcbiAgICAgICAgICAgIGV4cGVjdCgoKSA9PiB7IHNsdWdnZXIuc2x1ZyA9ICdjaGFuZ2UnOyB9KS50b1Rocm93KCk7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIGl0KCdzaG91bGQgbWFrZSBvY2N1cnJlbmNlcyBpbW11dGFibGUnLCAoKSA9PlxuICAgICAgICB7XG4gICAgICAgICAgICBjb25zdCBzbHVnZ2VyID0gbmV3IFNsdWdnZXIoJ3Rlc3QnLCAxKTtcbiAgICAgICAgICAgIHNsdWdnZXIub3duKCduZXcnKTtcbiAgICAgICAgICAgIGV4cGVjdCgoKSA9PiB7IHNsdWdnZXIub2NjdXJyZW5jZXMgPSAyOyB9KTtcbiAgICAgICAgfSk7XG5cbiAgICB9KTtcblxuXG4gICAgZGVzY3JpYmUoJ1Nob3VsZCBub3QgYmUgYWJsZSB0byBjaGFuZ2UgbWFwJywgKCkgPT5cbiAgICB7XG4gICAgICAgIGl0KCdzaG91bGQgbWFrZSBtYXAgaW1tdXRhYmxlJywgKCkgPT5cbiAgICAgICAge1xuICAgICAgICAgICAgY29uc3Qgc2x1Z2dlciA9IG5ldyBTbHVnZ2VyKCd0ZXN0JywgMSwgbmV3IE1hcChbWyd0ZXN0JywgMV1dKSk7XG4gICAgICAgICAgICBzbHVnZ2VyLm93bignbmV3Jyk7XG4gICAgICAgICAgICBleHBlY3QoKCkgPT4geyBzbHVnZ2VyLm1hcC5zZXQoJ25ldycsIDEpOyB9KTtcbiAgICAgICAgfSk7XG4gICAgfSk7XG5cbiAgICBkZXNjcmliZSgnQ2hhbmdlIHRoZSBjYXNlIG9mIHRoZSBzbHVnJywgKCkgPT5cbiAgICB7XG4gICAgICAgIGl0KCdzaG91bGQgY2hhbmdlIHRoZSBjYXNlIG9mIHRoZSBzbHVnJywgKCkgPT5cbiAgICAgICAge1xuICAgICAgICAgICAgY29uc3Qgc2x1Z2dlciA9IG5ldyBTbHVnZ2VyKCd0ZXN0Jyk7XG4gICAgICAgICAgICBzbHVnZ2VyLmNhcGl0YWxpemUoKTtcbiAgICAgICAgICAgIGV4cGVjdChzbHVnZ2VyLnNsdWcpLnRvQmUoJ1Rlc3QnKTtcbiAgICAgICAgfSk7XG4gICAgfSk7XG4gICAgZGVzY3JpYmUoJ0NoYW5nZSB0aGUgY2FzZSBvZiB0aGUgc2x1ZyB0byBsb3dlcmNhc2UnLCAoKSA9PlxuICAgIHtcbiAgICAgICAgaXQoJ3Nob3VsZCBjaGFuZ2UgdGhlIGNhc2Ugb2YgdGhlIHNsdWcgdG8gbG93ZXJjYXNlJywgKCkgPT5cbiAgICAgICAge1xuICAgICAgICAgICAgY29uc3Qgc2x1Z2dlciA9IG5ldyBTbHVnZ2VyKCdURVNUJyk7XG4gICAgICAgICAgICBzbHVnZ2VyLmxvd2VyY2FzZSgpO1xuICAgICAgICAgICAgZXhwZWN0KHNsdWdnZXIuc2x1ZykudG9CZSgndGVzdCcpO1xuICAgICAgICB9KTtcbiAgICB9KTtcbiAgICBkZXNjcmliZSgnb3duIG1ldGhvZCcsICgpID0+XG4gICAge1xuICAgICAgICBpdCgnc2hvdWxkIHJlZGVmaW5lIHNsdWcgcHJvcGVydHknLCAoKSA9PlxuICAgICAgICB7XG4gICAgICAgICAgICBjb25zdCBzbHVnZ2VyID0gbmV3IFNsdWdnZXIoJ3Rlc3QnKTtcbiAgICAgICAgICAgIHNsdWdnZXIub3duKCduZXcnKTtcbiAgICAgICAgICAgIGV4cGVjdChzbHVnZ2VyLnNsdWcpLnRvQmUoJ25ldycpO1xuICAgICAgICB9KTtcbiAgICB9KTtcbn0pO1xuIl0sInZlcnNpb24iOjN9