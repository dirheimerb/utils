e01d294d4b25fdbedce4e506c60f5b0c
"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const _1 = __importDefault(require("."));
describe('Slugger', () => {
    describe('constructor', () => {
        it('should create an instance with default values', () => {
            const slugger = new _1.default();
            expect(slugger.slug).toBe('');
            expect(slugger.occurrences).toBe(0);
            expect(slugger.map.size).toBe(0);
        });
        it('should create an instance with provided values', () => {
            const slugger = new _1.default('Hello World', 1, new Map([['Hello World', 1]]));
            expect(slugger.slug).toBe('Hello World');
            expect(slugger.occurrences).toBe(1);
            expect(slugger.map.size).toBe(1);
        });
    });
    describe('getters and setters', () => {
        const slugger = new _1.default();
        it('should set and get slug', () => {
            slugger.slug = 'test';
            expect(slugger.slug).toBe('test');
        });
        it('should set and get occurrences', () => {
            slugger.occurrences = 2;
            expect(slugger.occurrences).toBe(2);
        });
    });
    describe('own', () => {
        it('should make slug immutable', () => {
            const slugger = new _1.default('test');
            slugger.own('new');
            expect(() => { slugger.slug = 'change'; }).toThrow();
        });
        it('should make occurrences immutable', () => {
            const slugger = new _1.default('test', 1);
            slugger.own('new');
            expect(() => { slugger.occurrences = 2; });
        });
    });
    describe('Should not be able to change map', () => {
        it('should make map immutable', () => {
            const slugger = new _1.default('test', 1, new Map([['test', 1]]));
            slugger.own('new');
            expect(() => { slugger.map.set('new', 1); });
        });
    });
    describe('Change the case of the slug', () => {
        it('should change the case of the slug', () => {
            const slugger = new _1.default('test');
            slugger.capitalize();
            expect(slugger.slug).toBe('Test');
        });
    });
    describe('slugify', () => {
        it('should slugify a string correctly', () => __awaiter(void 0, void 0, void 0, function* () {
            const slugger = new _1.default('Test Slug');
            slugger.slugify('Test Slug');
            expect(slugger.slug).toBe('test-slug');
        }));
    });
    describe('reset', () => {
        it('should reset slugger to initial state', () => {
            const slugger = new _1.default('test');
            slugger.mapit();
            slugger.reset();
            expect(slugger.slug).toBe('');
            expect(slugger.occurrences).toBe(0);
            expect(slugger.map.size).toBe(0);
        });
        describe('Change the case of the slug to lowercase', () => {
            it('should change the case of the slug to lowercase', () => {
                const slugger = new _1.default('TEST');
                slugger.lowercase();
                expect(slugger.slug).toBe('test');
            });
        });
        describe('own method', () => {
            it('should redefine slug property', () => {
                const slugger = new _1.default('test');
                slugger.own('new');
                expect(slugger.slug).toBe('new');
            });
        });
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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QUMsS0FBSyxDQUFDLENBQUM7Z0JBQ25CLE1BQU0sQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDO1lBQ3JDLENBQUMsQ0FBQyxDQUFDO1FBQ1AsQ0FBQyxDQUFDLENBQUM7SUFDUCxDQUFDLENBQUMsQ0FBQztBQUNQLENBQUMsQ0FBQyxDQUFDIiwibmFtZXMiOltdLCJzb3VyY2VzIjpbIi9Vc2Vycy9iZGlyaGVpbWVyL0BmbGFzaHV0aWwvc3JjL2luZGV4LnRlc3QudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFNsdWdnZXIgZnJvbSBcIi5cIjtcblxuZGVzY3JpYmUoJ1NsdWdnZXInLCAoKSA9Plxue1xuICAgIGRlc2NyaWJlKCdjb25zdHJ1Y3RvcicsICgpID0+XG4gICAge1xuICAgICAgICBpdCgnc2hvdWxkIGNyZWF0ZSBhbiBpbnN0YW5jZSB3aXRoIGRlZmF1bHQgdmFsdWVzJywgKCkgPT5cbiAgICAgICAge1xuICAgICAgICAgICAgY29uc3Qgc2x1Z2dlciA9IG5ldyBTbHVnZ2VyKCk7XG4gICAgICAgICAgICBleHBlY3Qoc2x1Z2dlci5zbHVnKS50b0JlKCcnKTtcbiAgICAgICAgICAgIGV4cGVjdChzbHVnZ2VyLm9jY3VycmVuY2VzKS50b0JlKDApO1xuICAgICAgICAgICAgZXhwZWN0KHNsdWdnZXIubWFwLnNpemUpLnRvQmUoMCk7XG4gICAgICAgIH0pO1xuICAgICAgICBpdCgnc2hvdWxkIGNyZWF0ZSBhbiBpbnN0YW5jZSB3aXRoIHByb3ZpZGVkIHZhbHVlcycsICgpID0+XG4gICAgICAgIHtcbiAgICAgICAgICAgIGNvbnN0IHNsdWdnZXIgPSBuZXcgU2x1Z2dlcignSGVsbG8gV29ybGQnLCAxLCBuZXcgTWFwKFtbJ0hlbGxvIFdvcmxkJywgMV1dKSk7XG4gICAgICAgICAgICBleHBlY3Qoc2x1Z2dlci5zbHVnKS50b0JlKCdIZWxsbyBXb3JsZCcpO1xuICAgICAgICAgICAgZXhwZWN0KHNsdWdnZXIub2NjdXJyZW5jZXMpLnRvQmUoMSk7XG4gICAgICAgICAgICBleHBlY3Qoc2x1Z2dlci5tYXAuc2l6ZSkudG9CZSgxKTtcbiAgICAgICAgfSk7XG4gICAgfSk7XG5cbiAgICBkZXNjcmliZSgnZ2V0dGVycyBhbmQgc2V0dGVycycsICgpID0+XG4gICAge1xuICAgICAgICBjb25zdCBzbHVnZ2VyID0gbmV3IFNsdWdnZXIoKTtcbiAgICAgICAgaXQoJ3Nob3VsZCBzZXQgYW5kIGdldCBzbHVnJywgKCkgPT5cbiAgICAgICAge1xuICAgICAgICAgICAgc2x1Z2dlci5zbHVnID0gJ3Rlc3QnO1xuICAgICAgICAgICAgZXhwZWN0KHNsdWdnZXIuc2x1ZykudG9CZSgndGVzdCcpO1xuICAgICAgICB9KTtcblxuXG4gICAgICAgIGl0KCdzaG91bGQgc2V0IGFuZCBnZXQgb2NjdXJyZW5jZXMnLCAoKSA9PlxuICAgICAgICB7XG4gICAgICAgICAgICBzbHVnZ2VyLm9jY3VycmVuY2VzID0gMjtcbiAgICAgICAgICAgIGV4cGVjdChzbHVnZ2VyLm9jY3VycmVuY2VzKS50b0JlKDIpO1xuICAgICAgICB9KTtcbiAgICB9KTtcblxuICAgIGRlc2NyaWJlKCdvd24nLCAoKSA9PlxuICAgIHtcbiAgICAgICAgaXQoJ3Nob3VsZCBtYWtlIHNsdWcgaW1tdXRhYmxlJywgKCkgPT5cbiAgICAgICAge1xuICAgICAgICAgICAgY29uc3Qgc2x1Z2dlciA9IG5ldyBTbHVnZ2VyKCd0ZXN0Jyk7XG4gICAgICAgICAgICBzbHVnZ2VyLm93bignbmV3Jyk7XG4gICAgICAgICAgICBleHBlY3QoKCkgPT4geyBzbHVnZ2VyLnNsdWcgPSAnY2hhbmdlJzsgfSkudG9UaHJvdygpO1xuICAgICAgICB9KTtcblxuICAgICAgICBpdCgnc2hvdWxkIG1ha2Ugb2NjdXJyZW5jZXMgaW1tdXRhYmxlJywgKCkgPT5cbiAgICAgICAge1xuICAgICAgICAgICAgY29uc3Qgc2x1Z2dlciA9IG5ldyBTbHVnZ2VyKCd0ZXN0JywgMSk7XG4gICAgICAgICAgICBzbHVnZ2VyLm93bignbmV3Jyk7XG4gICAgICAgICAgICBleHBlY3QoKCkgPT4geyBzbHVnZ2VyLm9jY3VycmVuY2VzID0gMjsgfSk7XG4gICAgICAgIH0pO1xuXG4gICAgfSk7XG5cblxuICAgIGRlc2NyaWJlKCdTaG91bGQgbm90IGJlIGFibGUgdG8gY2hhbmdlIG1hcCcsICgpID0+XG4gICAge1xuICAgICAgICBpdCgnc2hvdWxkIG1ha2UgbWFwIGltbXV0YWJsZScsICgpID0+XG4gICAgICAgIHtcbiAgICAgICAgICAgIGNvbnN0IHNsdWdnZXIgPSBuZXcgU2x1Z2dlcigndGVzdCcsIDEsIG5ldyBNYXAoW1sndGVzdCcsIDFdXSkpO1xuICAgICAgICAgICAgc2x1Z2dlci5vd24oJ25ldycpO1xuICAgICAgICAgICAgZXhwZWN0KCgpID0+IHsgc2x1Z2dlci5tYXAuc2V0KCduZXcnLCAxKTsgfSk7XG4gICAgICAgIH0pO1xuICAgIH0pO1xuXG4gICAgZGVzY3JpYmUoJ0NoYW5nZSB0aGUgY2FzZSBvZiB0aGUgc2x1ZycsICgpID0+XG4gICAge1xuICAgICAgICBpdCgnc2hvdWxkIGNoYW5nZSB0aGUgY2FzZSBvZiB0aGUgc2x1ZycsICgpID0+XG4gICAgICAgIHtcbiAgICAgICAgICAgIGNvbnN0IHNsdWdnZXIgPSBuZXcgU2x1Z2dlcigndGVzdCcpO1xuICAgICAgICAgICAgc2x1Z2dlci5jYXBpdGFsaXplKCk7XG4gICAgICAgICAgICBleHBlY3Qoc2x1Z2dlci5zbHVnKS50b0JlKCdUZXN0Jyk7XG4gICAgICAgIH0pO1xuICAgIH0pO1xuICAgIGRlc2NyaWJlKCdzbHVnaWZ5JywgKCkgPT5cbiAgICB7XG4gICAgICAgIGl0KCdzaG91bGQgc2x1Z2lmeSBhIHN0cmluZyBjb3JyZWN0bHknLCBhc3luYyAoKSA9PlxuICAgICAgICB7XG4gICAgICAgICAgICBjb25zdCBzbHVnZ2VyID0gbmV3IFNsdWdnZXIoJ1Rlc3QgU2x1ZycpO1xuICAgICAgICAgICAgc2x1Z2dlci5zbHVnaWZ5KCdUZXN0IFNsdWcnKTtcbiAgICAgICAgICAgIGV4cGVjdChzbHVnZ2VyLnNsdWcpLnRvQmUoJ3Rlc3Qtc2x1ZycpO1xuICAgICAgICB9KTtcbiAgICB9KTtcblxuICAgIGRlc2NyaWJlKCdyZXNldCcsICgpID0+XG4gICAge1xuICAgICAgICBpdCgnc2hvdWxkIHJlc2V0IHNsdWdnZXIgdG8gaW5pdGlhbCBzdGF0ZScsICgpID0+XG4gICAgICAgIHtcbiAgICAgICAgICAgIGNvbnN0IHNsdWdnZXIgPSBuZXcgU2x1Z2dlcigndGVzdCcpO1xuICAgICAgICAgICAgc2x1Z2dlci5tYXBpdCgpO1xuICAgICAgICAgICAgc2x1Z2dlci5yZXNldCgpO1xuICAgICAgICAgICAgZXhwZWN0KHNsdWdnZXIuc2x1ZykudG9CZSgnJyk7XG4gICAgICAgICAgICBleHBlY3Qoc2x1Z2dlci5vY2N1cnJlbmNlcykudG9CZSgwKTtcbiAgICAgICAgICAgIGV4cGVjdChzbHVnZ2VyLm1hcC5zaXplKS50b0JlKDApO1xuICAgICAgICB9KTtcbiAgICAgICAgZGVzY3JpYmUoJ0NoYW5nZSB0aGUgY2FzZSBvZiB0aGUgc2x1ZyB0byBsb3dlcmNhc2UnLCAoKSA9PlxuICAgICAgICB7XG4gICAgICAgICAgICBpdCgnc2hvdWxkIGNoYW5nZSB0aGUgY2FzZSBvZiB0aGUgc2x1ZyB0byBsb3dlcmNhc2UnLCAoKSA9PlxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIGNvbnN0IHNsdWdnZXIgPSBuZXcgU2x1Z2dlcignVEVTVCcpO1xuICAgICAgICAgICAgICAgIHNsdWdnZXIubG93ZXJjYXNlKCk7XG4gICAgICAgICAgICAgICAgZXhwZWN0KHNsdWdnZXIuc2x1ZykudG9CZSgndGVzdCcpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0pO1xuICAgICAgICBkZXNjcmliZSgnb3duIG1ldGhvZCcsICgpID0+XG4gICAgICAgIHtcbiAgICAgICAgICAgIGl0KCdzaG91bGQgcmVkZWZpbmUgc2x1ZyBwcm9wZXJ0eScsICgpID0+XG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgY29uc3Qgc2x1Z2dlciA9IG5ldyBTbHVnZ2VyKCd0ZXN0Jyk7XG4gICAgICAgICAgICAgICAgc2x1Z2dlci5vd24oJ25ldycpO1xuICAgICAgICAgICAgICAgIGV4cGVjdChzbHVnZ2VyLnNsdWcpLnRvQmUoJ25ldycpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0pO1xuICAgIH0pO1xufSk7Il0sInZlcnNpb24iOjN9